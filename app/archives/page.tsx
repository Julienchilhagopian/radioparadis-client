'use client'

import type { Metadata } from "next";
import { useEffect, useState } from "react"
import Episode from "../components/Episode";
import styles from '../styles/archives.module.scss';

// export const metadata: Metadata = {
//   title: "Archives Radio Paradis",
//   description: "Generated by create next app",
// };

export default function Archives() {

  const [tracks, setTracks] = useState([]);
  const clientId = '5L6745YdtIFMSY4SRbSoZZfeFv1wE3vV'; // Remplacez par votre propre client_id
  const clientSecret = '85LLuWd0NZ0REfOS2YsvNyYCNOikQwbW'; // Remplacez par votre propre client_secret
  const userId = '989649643';

    // Fonction pour obtenir le premier jeton d'accès
    const getInitialToken = async () => {
      try {

        console.log("get initial token")
        const response = await fetch('https://api.soundcloud.com/oauth2/token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            grant_type: 'client_credentials',
            client_id: clientId,
            client_secret: clientSecret,
          }),
        });
  
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
  
        const data = await response.json();
        if (data.access_token) {
          // Sauvegarder le jeton d'accès et le refresh token
          console.log(data)
          localStorage.setItem('access_token', data.access_token);
          localStorage.setItem('refresh_token', data.refresh_token);
          localStorage.setItem('expires_in', Date.now() + data.expires_in * 1000); // Convertir en millisecondes
        } else {
          console.error('Erreur lors de la récupération du jeton d\'accès initial', data);
        }
      } catch (error) {
        console.error('Erreur lors de la requête du jeton d\'accès initial:', error);
      }
    };
  
    // Fonction pour rafraîchir le jeton d'accès
    const refreshToken = async () => {
      try {
        const refreshToken = localStorage.getItem('refresh_token');
        console.log(refreshToken)
        if (!refreshToken) {
          console.warn('Aucun refresh token trouvé, récupération du jeton initial.');
          await getInitialToken();
          return;
        }
  
        const response = await fetch('https://api.soundcloud.com/oauth2/token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: refreshToken,
            client_id: clientId,
            client_secret: clientSecret,
          }),
        });
  
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
  
        const data = await response.json();
        if (data.access_token) {
          // Sauvegarder les nouveaux tokens et l'heure d'expiration
          localStorage.setItem('access_token', data.access_token);
          localStorage.setItem('refresh_token', data.refresh_token);
          localStorage.setItem('expires_in', Date.now() + data.expires_in * 1000); // Convertir en millisecondes
        } else {
          console.error('Erreur lors de la récupération du nouveau jeton d\'accès', data);
        }
      } catch (error) {
        console.error('Erreur lors de la requête de rafraîchissement du jeton:', error);
      }
    };
  
    // Fonction pour récupérer les sons de l'utilisateur
    const fetchTracks = async () => {
      try {
        // Vérifiez si le jeton d'accès a expiré
        const expiresIn = localStorage.getItem('expires_in');
        if (!expiresIn || Date.now() > expiresIn) {
          await refreshToken();
        }
        
        const accessToken = localStorage.getItem('access_token');
        
        console.log(accessToken)

        const tracksResponse = await fetch(
          `https://api.soundcloud.com/users/${userId}/tracks`,
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
            },
          }
        );
  
        const tracksData = await tracksResponse.json();
        console.log(tracksData)
        setTracks(tracksData);
      } catch (error) {
        console.error('Erreur lors de la récupération des sons:', error);
      }
    };
  
    // Hook pour lancer la récupération des sons lors du montage du composant
    useEffect(() => {
      fetchTracks();
    }, []);

  return (
      <div className={styles.archives}>
        {tracks.map(episode => (
          <Episode key={episode.id} episode={episode} />
        ))}
      <h1>Archives</h1>
    </div>
  )
}
